Grammar

    0 $accept: start $end

    1 start: program

    2 program: declare END evaluate

    3 declare: all_declarations DECLEND

    4 all_declarations: declaration all_declarations
    5                 | /* empty */

    6 declaration: ID ASSIGN_OP aexpr END

    7 evaluate: aexpr END
    8         | if_statement END

    9 aexpr: aexpr P aexpr
   10      | aexpr M aexpr
   11      | aexpr S aexpr
   12      | aexpr R aexpr
   13      | aexpr D aexpr
   14      | '(' aexpr ')'
   15      | M aexpr
   16      | aexpr C aexpr
   17      | NUMBER
   18      | ID

   19 lexpr: aexpr LT aexpr
   20      | aexpr GT aexpr
   21      | aexpr EQ aexpr

   22 if_statement: IF lexpr THEN aexpr ENDIF
   23             | IF lexpr THEN aexpr ELSE aexpr ENDIF


Terminals, with rules where they appear

$end (0) 0
'(' (40) 14
')' (41) 14
error (256)
NUMBER (258) 17
END (259) 2 6 7 8
DECLEND (260) 3
P (261) 9
M (262) 10 15
S (263) 11
D (264) 13
C (265) 16
R (266) 12
ID (267) 6 18
ASSIGN_OP (268) 6
LT (269) 19
GT (270) 20
EQ (271) 21
IF (272) 22 23
THEN (273) 22 23
ENDIF (274) 22 23
ELSE (275) 23
UMINUS (276)


Nonterminals, with rules where they appear

$accept (24)
    on left: 0
start (25)
    on left: 1, on right: 0
program (26)
    on left: 2, on right: 1
declare (27)
    on left: 3, on right: 2
all_declarations (28)
    on left: 4 5, on right: 3 4
declaration (29)
    on left: 6, on right: 4
evaluate (30)
    on left: 7 8, on right: 2
aexpr (31)
    on left: 9 10 11 12 13 14 15 16 17 18, on right: 6 7 9 10 11 12
    13 14 15 16 19 20 21 22 23
lexpr (32)
    on left: 19 20 21, on right: 22 23
if_statement (33)
    on left: 22 23, on right: 8


state 0

    0 $accept: . start $end

    ID  shift, and go to state 1

    $default  reduce using rule 5 (all_declarations)

    start             go to state 2
    program           go to state 3
    declare           go to state 4
    all_declarations  go to state 5
    declaration       go to state 6


state 1

    6 declaration: ID . ASSIGN_OP aexpr END

    ASSIGN_OP  shift, and go to state 7


state 2

    0 $accept: start . $end

    $end  shift, and go to state 8


state 3

    1 start: program .

    $default  reduce using rule 1 (start)


state 4

    2 program: declare . END evaluate

    END  shift, and go to state 9


state 5

    3 declare: all_declarations . DECLEND

    DECLEND  shift, and go to state 10


state 6

    4 all_declarations: declaration . all_declarations

    ID  shift, and go to state 1

    $default  reduce using rule 5 (all_declarations)

    all_declarations  go to state 11
    declaration       go to state 6


state 7

    6 declaration: ID ASSIGN_OP . aexpr END

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    '('     shift, and go to state 15

    aexpr  go to state 16


state 8

    0 $accept: start $end .

    $default  accept


state 9

    2 program: declare END . evaluate

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    IF      shift, and go to state 17
    '('     shift, and go to state 15

    evaluate      go to state 18
    aexpr         go to state 19
    if_statement  go to state 20


state 10

    3 declare: all_declarations DECLEND .

    $default  reduce using rule 3 (declare)


state 11

    4 all_declarations: declaration all_declarations .

    $default  reduce using rule 4 (all_declarations)


state 12

   17 aexpr: NUMBER .

    $default  reduce using rule 17 (aexpr)


state 13

   15 aexpr: M . aexpr

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    '('     shift, and go to state 15

    aexpr  go to state 21


state 14

   18 aexpr: ID .

    $default  reduce using rule 18 (aexpr)


state 15

   14 aexpr: '(' . aexpr ')'

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    '('     shift, and go to state 15

    aexpr  go to state 22


state 16

    6 declaration: ID ASSIGN_OP aexpr . END
    9 aexpr: aexpr . P aexpr
   10      | aexpr . M aexpr
   11      | aexpr . S aexpr
   12      | aexpr . R aexpr
   13      | aexpr . D aexpr
   16      | aexpr . C aexpr

    END  shift, and go to state 23
    P    shift, and go to state 24
    M    shift, and go to state 25
    S    shift, and go to state 26
    D    shift, and go to state 27
    C    shift, and go to state 28
    R    shift, and go to state 29


state 17

   22 if_statement: IF . lexpr THEN aexpr ENDIF
   23             | IF . lexpr THEN aexpr ELSE aexpr ENDIF

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    '('     shift, and go to state 15

    aexpr  go to state 30
    lexpr  go to state 31


state 18

    2 program: declare END evaluate .

    $default  reduce using rule 2 (program)


state 19

    7 evaluate: aexpr . END
    9 aexpr: aexpr . P aexpr
   10      | aexpr . M aexpr
   11      | aexpr . S aexpr
   12      | aexpr . R aexpr
   13      | aexpr . D aexpr
   16      | aexpr . C aexpr

    END  shift, and go to state 32
    P    shift, and go to state 24
    M    shift, and go to state 25
    S    shift, and go to state 26
    D    shift, and go to state 27
    C    shift, and go to state 28
    R    shift, and go to state 29


state 20

    8 evaluate: if_statement . END

    END  shift, and go to state 33


state 21

    9 aexpr: aexpr . P aexpr
   10      | aexpr . M aexpr
   11      | aexpr . S aexpr
   12      | aexpr . R aexpr
   13      | aexpr . D aexpr
   15      | M aexpr .
   16      | aexpr . C aexpr

    $default  reduce using rule 15 (aexpr)


state 22

    9 aexpr: aexpr . P aexpr
   10      | aexpr . M aexpr
   11      | aexpr . S aexpr
   12      | aexpr . R aexpr
   13      | aexpr . D aexpr
   14      | '(' aexpr . ')'
   16      | aexpr . C aexpr

    P    shift, and go to state 24
    M    shift, and go to state 25
    S    shift, and go to state 26
    D    shift, and go to state 27
    C    shift, and go to state 28
    R    shift, and go to state 29
    ')'  shift, and go to state 34


state 23

    6 declaration: ID ASSIGN_OP aexpr END .

    $default  reduce using rule 6 (declaration)


state 24

    9 aexpr: aexpr P . aexpr

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    '('     shift, and go to state 15

    aexpr  go to state 35


state 25

   10 aexpr: aexpr M . aexpr

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    '('     shift, and go to state 15

    aexpr  go to state 36


state 26

   11 aexpr: aexpr S . aexpr

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    '('     shift, and go to state 15

    aexpr  go to state 37


state 27

   13 aexpr: aexpr D . aexpr

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    '('     shift, and go to state 15

    aexpr  go to state 38


state 28

   16 aexpr: aexpr C . aexpr

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    '('     shift, and go to state 15

    aexpr  go to state 39


state 29

   12 aexpr: aexpr R . aexpr

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    '('     shift, and go to state 15

    aexpr  go to state 40


state 30

    9 aexpr: aexpr . P aexpr
   10      | aexpr . M aexpr
   11      | aexpr . S aexpr
   12      | aexpr . R aexpr
   13      | aexpr . D aexpr
   16      | aexpr . C aexpr
   19 lexpr: aexpr . LT aexpr
   20      | aexpr . GT aexpr
   21      | aexpr . EQ aexpr

    P   shift, and go to state 24
    M   shift, and go to state 25
    S   shift, and go to state 26
    D   shift, and go to state 27
    C   shift, and go to state 28
    R   shift, and go to state 29
    LT  shift, and go to state 41
    GT  shift, and go to state 42
    EQ  shift, and go to state 43


state 31

   22 if_statement: IF lexpr . THEN aexpr ENDIF
   23             | IF lexpr . THEN aexpr ELSE aexpr ENDIF

    THEN  shift, and go to state 44


state 32

    7 evaluate: aexpr END .

    $default  reduce using rule 7 (evaluate)


state 33

    8 evaluate: if_statement END .

    $default  reduce using rule 8 (evaluate)


state 34

   14 aexpr: '(' aexpr ')' .

    $default  reduce using rule 14 (aexpr)


state 35

    9 aexpr: aexpr . P aexpr
    9      | aexpr P aexpr .
   10      | aexpr . M aexpr
   11      | aexpr . S aexpr
   12      | aexpr . R aexpr
   13      | aexpr . D aexpr
   16      | aexpr . C aexpr

    S  shift, and go to state 26
    D  shift, and go to state 27
    C  shift, and go to state 28
    R  shift, and go to state 29

    $default  reduce using rule 9 (aexpr)


state 36

    9 aexpr: aexpr . P aexpr
   10      | aexpr . M aexpr
   10      | aexpr M aexpr .
   11      | aexpr . S aexpr
   12      | aexpr . R aexpr
   13      | aexpr . D aexpr
   16      | aexpr . C aexpr

    S  shift, and go to state 26
    D  shift, and go to state 27
    C  shift, and go to state 28
    R  shift, and go to state 29

    $default  reduce using rule 10 (aexpr)


state 37

    9 aexpr: aexpr . P aexpr
   10      | aexpr . M aexpr
   11      | aexpr . S aexpr
   11      | aexpr S aexpr .
   12      | aexpr . R aexpr
   13      | aexpr . D aexpr
   16      | aexpr . C aexpr

    C  shift, and go to state 28
    R  shift, and go to state 29

    $default  reduce using rule 11 (aexpr)


state 38

    9 aexpr: aexpr . P aexpr
   10      | aexpr . M aexpr
   11      | aexpr . S aexpr
   12      | aexpr . R aexpr
   13      | aexpr . D aexpr
   13      | aexpr D aexpr .
   16      | aexpr . C aexpr

    C  shift, and go to state 28
    R  shift, and go to state 29

    $default  reduce using rule 13 (aexpr)


state 39

    9 aexpr: aexpr . P aexpr
   10      | aexpr . M aexpr
   11      | aexpr . S aexpr
   12      | aexpr . R aexpr
   13      | aexpr . D aexpr
   16      | aexpr . C aexpr
   16      | aexpr C aexpr .

    R  shift, and go to state 29

    C  error (nonassociative)

    $default  reduce using rule 16 (aexpr)


state 40

    9 aexpr: aexpr . P aexpr
   10      | aexpr . M aexpr
   11      | aexpr . S aexpr
   12      | aexpr . R aexpr
   12      | aexpr R aexpr .
   13      | aexpr . D aexpr
   16      | aexpr . C aexpr

    R  error (nonassociative)

    $default  reduce using rule 12 (aexpr)


state 41

   19 lexpr: aexpr LT . aexpr

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    '('     shift, and go to state 15

    aexpr  go to state 45


state 42

   20 lexpr: aexpr GT . aexpr

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    '('     shift, and go to state 15

    aexpr  go to state 46


state 43

   21 lexpr: aexpr EQ . aexpr

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    '('     shift, and go to state 15

    aexpr  go to state 47


state 44

   22 if_statement: IF lexpr THEN . aexpr ENDIF
   23             | IF lexpr THEN . aexpr ELSE aexpr ENDIF

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    '('     shift, and go to state 15

    aexpr  go to state 48


state 45

    9 aexpr: aexpr . P aexpr
   10      | aexpr . M aexpr
   11      | aexpr . S aexpr
   12      | aexpr . R aexpr
   13      | aexpr . D aexpr
   16      | aexpr . C aexpr
   19 lexpr: aexpr LT aexpr .

    P  shift, and go to state 24
    M  shift, and go to state 25
    S  shift, and go to state 26
    D  shift, and go to state 27
    C  shift, and go to state 28
    R  shift, and go to state 29

    $default  reduce using rule 19 (lexpr)


state 46

    9 aexpr: aexpr . P aexpr
   10      | aexpr . M aexpr
   11      | aexpr . S aexpr
   12      | aexpr . R aexpr
   13      | aexpr . D aexpr
   16      | aexpr . C aexpr
   20 lexpr: aexpr GT aexpr .

    P  shift, and go to state 24
    M  shift, and go to state 25
    S  shift, and go to state 26
    D  shift, and go to state 27
    C  shift, and go to state 28
    R  shift, and go to state 29

    $default  reduce using rule 20 (lexpr)


state 47

    9 aexpr: aexpr . P aexpr
   10      | aexpr . M aexpr
   11      | aexpr . S aexpr
   12      | aexpr . R aexpr
   13      | aexpr . D aexpr
   16      | aexpr . C aexpr
   21 lexpr: aexpr EQ aexpr .

    P  shift, and go to state 24
    M  shift, and go to state 25
    S  shift, and go to state 26
    D  shift, and go to state 27
    C  shift, and go to state 28
    R  shift, and go to state 29

    $default  reduce using rule 21 (lexpr)


state 48

    9 aexpr: aexpr . P aexpr
   10      | aexpr . M aexpr
   11      | aexpr . S aexpr
   12      | aexpr . R aexpr
   13      | aexpr . D aexpr
   16      | aexpr . C aexpr
   22 if_statement: IF lexpr THEN aexpr . ENDIF
   23             | IF lexpr THEN aexpr . ELSE aexpr ENDIF

    P      shift, and go to state 24
    M      shift, and go to state 25
    S      shift, and go to state 26
    D      shift, and go to state 27
    C      shift, and go to state 28
    R      shift, and go to state 29
    ENDIF  shift, and go to state 49
    ELSE   shift, and go to state 50


state 49

   22 if_statement: IF lexpr THEN aexpr ENDIF .

    $default  reduce using rule 22 (if_statement)


state 50

   23 if_statement: IF lexpr THEN aexpr ELSE . aexpr ENDIF

    NUMBER  shift, and go to state 12
    M       shift, and go to state 13
    ID      shift, and go to state 14
    '('     shift, and go to state 15

    aexpr  go to state 51


state 51

    9 aexpr: aexpr . P aexpr
   10      | aexpr . M aexpr
   11      | aexpr . S aexpr
   12      | aexpr . R aexpr
   13      | aexpr . D aexpr
   16      | aexpr . C aexpr
   23 if_statement: IF lexpr THEN aexpr ELSE aexpr . ENDIF

    P      shift, and go to state 24
    M      shift, and go to state 25
    S      shift, and go to state 26
    D      shift, and go to state 27
    C      shift, and go to state 28
    R      shift, and go to state 29
    ENDIF  shift, and go to state 52


state 52

   23 if_statement: IF lexpr THEN aexpr ELSE aexpr ENDIF .

    $default  reduce using rule 23 (if_statement)
