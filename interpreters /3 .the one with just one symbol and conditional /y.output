Terminals unused in grammar

   END


Grammar

    0 $accept: start $end

    1 start: program

    2 program: stmts

    3 stmts: stmts stmt
    4      | /* empty */

    5 stmt: ID ASSIGN_OP expr ';'
    6     | READ '(' ID ')' ';'
    7     | WRITE '(' expr ')' ';'
    8     | IF '(' lexpr ')' THEN stmts ENDIF ';'
    9     | IF '(' lexpr ')' THEN stmts ELSE stmts ENDIF ';'
   10     | WHILE '(' lexpr ')' DO stmts ENDWHILE ';'

   11 lexpr: expr RELOP expr

   12 expr: expr P expr
   13     | expr M expr
   14     | expr S expr
   15     | expr R expr
   16     | expr D expr
   17     | '(' expr ')'
   18     | M expr
   19     | expr C expr
   20     | NUMBER
   21     | ID


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 7 8 9 10 17
')' (41) 6 7 8 9 10 17
';' (59) 5 6 7 8 9 10
error (256)
NUMBER (258) 20
END (259)
P (260) 12
M (261) 13 18
S (262) 14
D (263) 16
C (264) 19
R (265) 15
READ (266) 6
WRITE (267) 7
ASSIGN_OP (268) 5
ID (269) 5 6 21
RELOP (270) 11
IF (271) 8 9
THEN (272) 8 9
ENDIF (273) 8 9
ELSE (274) 9
WHILE (275) 10
DO (276) 10
ENDWHILE (277) 10
UMINUS (278)


Nonterminals, with rules where they appear

$accept (27)
    on left: 0
start (28)
    on left: 1, on right: 0
program (29)
    on left: 2, on right: 1
stmts (30)
    on left: 3 4, on right: 2 3 8 9 10
stmt (31)
    on left: 5 6 7 8 9 10, on right: 3
lexpr (32)
    on left: 11, on right: 8 9 10
expr (33)
    on left: 12 13 14 15 16 17 18 19 20 21, on right: 5 7 11 12 13
    14 15 16 17 18 19


state 0

    0 $accept: . start $end

    $default  reduce using rule 4 (stmts)

    start    go to state 1
    program  go to state 2
    stmts    go to state 3


state 1

    0 $accept: start . $end

    $end  shift, and go to state 4


state 2

    1 start: program .

    $default  reduce using rule 1 (start)


state 3

    2 program: stmts .
    3 stmts: stmts . stmt

    READ   shift, and go to state 5
    WRITE  shift, and go to state 6
    ID     shift, and go to state 7
    IF     shift, and go to state 8
    WHILE  shift, and go to state 9

    $default  reduce using rule 2 (program)

    stmt  go to state 10


state 4

    0 $accept: start $end .

    $default  accept


state 5

    6 stmt: READ . '(' ID ')' ';'

    '('  shift, and go to state 11


state 6

    7 stmt: WRITE . '(' expr ')' ';'

    '('  shift, and go to state 12


state 7

    5 stmt: ID . ASSIGN_OP expr ';'

    ASSIGN_OP  shift, and go to state 13


state 8

    8 stmt: IF . '(' lexpr ')' THEN stmts ENDIF ';'
    9     | IF . '(' lexpr ')' THEN stmts ELSE stmts ENDIF ';'

    '('  shift, and go to state 14


state 9

   10 stmt: WHILE . '(' lexpr ')' DO stmts ENDWHILE ';'

    '('  shift, and go to state 15


state 10

    3 stmts: stmts stmt .

    $default  reduce using rule 3 (stmts)


state 11

    6 stmt: READ '(' . ID ')' ';'

    ID  shift, and go to state 16


state 12

    7 stmt: WRITE '(' . expr ')' ';'

    NUMBER  shift, and go to state 17
    M       shift, and go to state 18
    ID      shift, and go to state 19
    '('     shift, and go to state 20

    expr  go to state 21


state 13

    5 stmt: ID ASSIGN_OP . expr ';'

    NUMBER  shift, and go to state 17
    M       shift, and go to state 18
    ID      shift, and go to state 19
    '('     shift, and go to state 20

    expr  go to state 22


state 14

    8 stmt: IF '(' . lexpr ')' THEN stmts ENDIF ';'
    9     | IF '(' . lexpr ')' THEN stmts ELSE stmts ENDIF ';'

    NUMBER  shift, and go to state 17
    M       shift, and go to state 18
    ID      shift, and go to state 19
    '('     shift, and go to state 20

    lexpr  go to state 23
    expr   go to state 24


state 15

   10 stmt: WHILE '(' . lexpr ')' DO stmts ENDWHILE ';'

    NUMBER  shift, and go to state 17
    M       shift, and go to state 18
    ID      shift, and go to state 19
    '('     shift, and go to state 20

    lexpr  go to state 25
    expr   go to state 24


state 16

    6 stmt: READ '(' ID . ')' ';'

    ')'  shift, and go to state 26


state 17

   20 expr: NUMBER .

    $default  reduce using rule 20 (expr)


state 18

   18 expr: M . expr

    NUMBER  shift, and go to state 17
    M       shift, and go to state 18
    ID      shift, and go to state 19
    '('     shift, and go to state 20

    expr  go to state 27


state 19

   21 expr: ID .

    $default  reduce using rule 21 (expr)


state 20

   17 expr: '(' . expr ')'

    NUMBER  shift, and go to state 17
    M       shift, and go to state 18
    ID      shift, and go to state 19
    '('     shift, and go to state 20

    expr  go to state 28


state 21

    7 stmt: WRITE '(' expr . ')' ';'
   12 expr: expr . P expr
   13     | expr . M expr
   14     | expr . S expr
   15     | expr . R expr
   16     | expr . D expr
   19     | expr . C expr

    P    shift, and go to state 29
    M    shift, and go to state 30
    S    shift, and go to state 31
    D    shift, and go to state 32
    C    shift, and go to state 33
    R    shift, and go to state 34
    ')'  shift, and go to state 35


state 22

    5 stmt: ID ASSIGN_OP expr . ';'
   12 expr: expr . P expr
   13     | expr . M expr
   14     | expr . S expr
   15     | expr . R expr
   16     | expr . D expr
   19     | expr . C expr

    P    shift, and go to state 29
    M    shift, and go to state 30
    S    shift, and go to state 31
    D    shift, and go to state 32
    C    shift, and go to state 33
    R    shift, and go to state 34
    ';'  shift, and go to state 36


state 23

    8 stmt: IF '(' lexpr . ')' THEN stmts ENDIF ';'
    9     | IF '(' lexpr . ')' THEN stmts ELSE stmts ENDIF ';'

    ')'  shift, and go to state 37


state 24

   11 lexpr: expr . RELOP expr
   12 expr: expr . P expr
   13     | expr . M expr
   14     | expr . S expr
   15     | expr . R expr
   16     | expr . D expr
   19     | expr . C expr

    P      shift, and go to state 29
    M      shift, and go to state 30
    S      shift, and go to state 31
    D      shift, and go to state 32
    C      shift, and go to state 33
    R      shift, and go to state 34
    RELOP  shift, and go to state 38


state 25

   10 stmt: WHILE '(' lexpr . ')' DO stmts ENDWHILE ';'

    ')'  shift, and go to state 39


state 26

    6 stmt: READ '(' ID ')' . ';'

    ';'  shift, and go to state 40


state 27

   12 expr: expr . P expr
   13     | expr . M expr
   14     | expr . S expr
   15     | expr . R expr
   16     | expr . D expr
   18     | M expr .
   19     | expr . C expr

    $default  reduce using rule 18 (expr)


state 28

   12 expr: expr . P expr
   13     | expr . M expr
   14     | expr . S expr
   15     | expr . R expr
   16     | expr . D expr
   17     | '(' expr . ')'
   19     | expr . C expr

    P    shift, and go to state 29
    M    shift, and go to state 30
    S    shift, and go to state 31
    D    shift, and go to state 32
    C    shift, and go to state 33
    R    shift, and go to state 34
    ')'  shift, and go to state 41


state 29

   12 expr: expr P . expr

    NUMBER  shift, and go to state 17
    M       shift, and go to state 18
    ID      shift, and go to state 19
    '('     shift, and go to state 20

    expr  go to state 42


state 30

   13 expr: expr M . expr

    NUMBER  shift, and go to state 17
    M       shift, and go to state 18
    ID      shift, and go to state 19
    '('     shift, and go to state 20

    expr  go to state 43


state 31

   14 expr: expr S . expr

    NUMBER  shift, and go to state 17
    M       shift, and go to state 18
    ID      shift, and go to state 19
    '('     shift, and go to state 20

    expr  go to state 44


state 32

   16 expr: expr D . expr

    NUMBER  shift, and go to state 17
    M       shift, and go to state 18
    ID      shift, and go to state 19
    '('     shift, and go to state 20

    expr  go to state 45


state 33

   19 expr: expr C . expr

    NUMBER  shift, and go to state 17
    M       shift, and go to state 18
    ID      shift, and go to state 19
    '('     shift, and go to state 20

    expr  go to state 46


state 34

   15 expr: expr R . expr

    NUMBER  shift, and go to state 17
    M       shift, and go to state 18
    ID      shift, and go to state 19
    '('     shift, and go to state 20

    expr  go to state 47


state 35

    7 stmt: WRITE '(' expr ')' . ';'

    ';'  shift, and go to state 48


state 36

    5 stmt: ID ASSIGN_OP expr ';' .

    $default  reduce using rule 5 (stmt)


state 37

    8 stmt: IF '(' lexpr ')' . THEN stmts ENDIF ';'
    9     | IF '(' lexpr ')' . THEN stmts ELSE stmts ENDIF ';'

    THEN  shift, and go to state 49


state 38

   11 lexpr: expr RELOP . expr

    NUMBER  shift, and go to state 17
    M       shift, and go to state 18
    ID      shift, and go to state 19
    '('     shift, and go to state 20

    expr  go to state 50


state 39

   10 stmt: WHILE '(' lexpr ')' . DO stmts ENDWHILE ';'

    DO  shift, and go to state 51


state 40

    6 stmt: READ '(' ID ')' ';' .

    $default  reduce using rule 6 (stmt)


state 41

   17 expr: '(' expr ')' .

    $default  reduce using rule 17 (expr)


state 42

   12 expr: expr . P expr
   12     | expr P expr .
   13     | expr . M expr
   14     | expr . S expr
   15     | expr . R expr
   16     | expr . D expr
   19     | expr . C expr

    M  shift, and go to state 30
    D  shift, and go to state 32
    C  shift, and go to state 33
    R  shift, and go to state 34

    $default  reduce using rule 12 (expr)


state 43

   12 expr: expr . P expr
   13     | expr . M expr
   13     | expr M expr .
   14     | expr . S expr
   15     | expr . R expr
   16     | expr . D expr
   19     | expr . C expr

    C  shift, and go to state 33
    R  shift, and go to state 34

    $default  reduce using rule 13 (expr)


state 44

   12 expr: expr . P expr
   13     | expr . M expr
   14     | expr . S expr
   14     | expr S expr .
   15     | expr . R expr
   16     | expr . D expr
   19     | expr . C expr

    M  shift, and go to state 30
    D  shift, and go to state 32
    C  shift, and go to state 33
    R  shift, and go to state 34

    $default  reduce using rule 14 (expr)


state 45

   12 expr: expr . P expr
   13     | expr . M expr
   14     | expr . S expr
   15     | expr . R expr
   16     | expr . D expr
   16     | expr D expr .
   19     | expr . C expr

    C  shift, and go to state 33
    R  shift, and go to state 34

    $default  reduce using rule 16 (expr)


state 46

   12 expr: expr . P expr
   13     | expr . M expr
   14     | expr . S expr
   15     | expr . R expr
   16     | expr . D expr
   19     | expr . C expr
   19     | expr C expr .

    R  shift, and go to state 34

    C  error (nonassociative)

    $default  reduce using rule 19 (expr)


state 47

   12 expr: expr . P expr
   13     | expr . M expr
   14     | expr . S expr
   15     | expr . R expr
   15     | expr R expr .
   16     | expr . D expr
   19     | expr . C expr

    R  error (nonassociative)

    $default  reduce using rule 15 (expr)


state 48

    7 stmt: WRITE '(' expr ')' ';' .

    $default  reduce using rule 7 (stmt)


state 49

    8 stmt: IF '(' lexpr ')' THEN . stmts ENDIF ';'
    9     | IF '(' lexpr ')' THEN . stmts ELSE stmts ENDIF ';'

    $default  reduce using rule 4 (stmts)

    stmts  go to state 52


state 50

   11 lexpr: expr RELOP expr .
   12 expr: expr . P expr
   13     | expr . M expr
   14     | expr . S expr
   15     | expr . R expr
   16     | expr . D expr
   19     | expr . C expr

    P  shift, and go to state 29
    M  shift, and go to state 30
    S  shift, and go to state 31
    D  shift, and go to state 32
    C  shift, and go to state 33
    R  shift, and go to state 34

    $default  reduce using rule 11 (lexpr)


state 51

   10 stmt: WHILE '(' lexpr ')' DO . stmts ENDWHILE ';'

    $default  reduce using rule 4 (stmts)

    stmts  go to state 53


state 52

    3 stmts: stmts . stmt
    8 stmt: IF '(' lexpr ')' THEN stmts . ENDIF ';'
    9     | IF '(' lexpr ')' THEN stmts . ELSE stmts ENDIF ';'

    READ   shift, and go to state 5
    WRITE  shift, and go to state 6
    ID     shift, and go to state 7
    IF     shift, and go to state 8
    ENDIF  shift, and go to state 54
    ELSE   shift, and go to state 55
    WHILE  shift, and go to state 9

    stmt  go to state 10


state 53

    3 stmts: stmts . stmt
   10 stmt: WHILE '(' lexpr ')' DO stmts . ENDWHILE ';'

    READ      shift, and go to state 5
    WRITE     shift, and go to state 6
    ID        shift, and go to state 7
    IF        shift, and go to state 8
    WHILE     shift, and go to state 9
    ENDWHILE  shift, and go to state 56

    stmt  go to state 10


state 54

    8 stmt: IF '(' lexpr ')' THEN stmts ENDIF . ';'

    ';'  shift, and go to state 57


state 55

    9 stmt: IF '(' lexpr ')' THEN stmts ELSE . stmts ENDIF ';'

    $default  reduce using rule 4 (stmts)

    stmts  go to state 58


state 56

   10 stmt: WHILE '(' lexpr ')' DO stmts ENDWHILE . ';'

    ';'  shift, and go to state 59


state 57

    8 stmt: IF '(' lexpr ')' THEN stmts ENDIF ';' .

    $default  reduce using rule 8 (stmt)


state 58

    3 stmts: stmts . stmt
    9 stmt: IF '(' lexpr ')' THEN stmts ELSE stmts . ENDIF ';'

    READ   shift, and go to state 5
    WRITE  shift, and go to state 6
    ID     shift, and go to state 7
    IF     shift, and go to state 8
    ENDIF  shift, and go to state 60
    WHILE  shift, and go to state 9

    stmt  go to state 10


state 59

   10 stmt: WHILE '(' lexpr ')' DO stmts ENDWHILE ';' .

    $default  reduce using rule 10 (stmt)


state 60

    9 stmt: IF '(' lexpr ')' THEN stmts ELSE stmts ENDIF . ';'

    ';'  shift, and go to state 61


state 61

    9 stmt: IF '(' lexpr ')' THEN stmts ELSE stmts ENDIF ';' .

    $default  reduce using rule 9 (stmt)
