Terminals unused in grammar

   END


Grammar

    0 $accept: start $end

    1 start: program

    2 program: stmts

    3 stmts: stmts stmt
    4      | /* empty */

    5 stmt: ID ASSIGN_OP expr ';'
    6     | READ '(' ID ')' ';'
    7     | WRITE '(' expr ')' ';'
    8     | IF '(' lexpr ')' THEN stmts ENDIF ';'
    9     | IF '(' lexpr ')' THEN stmts ELSE stmts ENDIF ';'

   10 lexpr: expr RELOP expr

   11 expr: expr P expr
   12     | expr M expr
   13     | expr S expr
   14     | expr R expr
   15     | expr D expr
   16     | '(' expr ')'
   17     | M expr
   18     | expr C expr
   19     | NUMBER
   20     | ID


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 7 8 9 16
')' (41) 6 7 8 9 16
';' (59) 5 6 7 8 9
error (256)
NUMBER (258) 19
END (259)
P (260) 11
M (261) 12 17
S (262) 13
D (263) 15
C (264) 18
R (265) 14
READ (266) 6
WRITE (267) 7
ASSIGN_OP (268) 5
ID (269) 5 6 20
RELOP (270) 10
IF (271) 8 9
THEN (272) 8 9
ENDIF (273) 8 9
ELSE (274) 9
UMINUS (275)


Nonterminals, with rules where they appear

$accept (24)
    on left: 0
start (25)
    on left: 1, on right: 0
program (26)
    on left: 2, on right: 1
stmts (27)
    on left: 3 4, on right: 2 3 8 9
stmt (28)
    on left: 5 6 7 8 9, on right: 3
lexpr (29)
    on left: 10, on right: 8 9
expr (30)
    on left: 11 12 13 14 15 16 17 18 19 20, on right: 5 7 10 11 12
    13 14 15 16 17 18


state 0

    0 $accept: . start $end

    $default  reduce using rule 4 (stmts)

    start    go to state 1
    program  go to state 2
    stmts    go to state 3


state 1

    0 $accept: start . $end

    $end  shift, and go to state 4


state 2

    1 start: program .

    $default  reduce using rule 1 (start)


state 3

    2 program: stmts .
    3 stmts: stmts . stmt

    READ   shift, and go to state 5
    WRITE  shift, and go to state 6
    ID     shift, and go to state 7
    IF     shift, and go to state 8

    $default  reduce using rule 2 (program)

    stmt  go to state 9


state 4

    0 $accept: start $end .

    $default  accept


state 5

    6 stmt: READ . '(' ID ')' ';'

    '('  shift, and go to state 10


state 6

    7 stmt: WRITE . '(' expr ')' ';'

    '('  shift, and go to state 11


state 7

    5 stmt: ID . ASSIGN_OP expr ';'

    ASSIGN_OP  shift, and go to state 12


state 8

    8 stmt: IF . '(' lexpr ')' THEN stmts ENDIF ';'
    9     | IF . '(' lexpr ')' THEN stmts ELSE stmts ENDIF ';'

    '('  shift, and go to state 13


state 9

    3 stmts: stmts stmt .

    $default  reduce using rule 3 (stmts)


state 10

    6 stmt: READ '(' . ID ')' ';'

    ID  shift, and go to state 14


state 11

    7 stmt: WRITE '(' . expr ')' ';'

    NUMBER  shift, and go to state 15
    M       shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18

    expr  go to state 19


state 12

    5 stmt: ID ASSIGN_OP . expr ';'

    NUMBER  shift, and go to state 15
    M       shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18

    expr  go to state 20


state 13

    8 stmt: IF '(' . lexpr ')' THEN stmts ENDIF ';'
    9     | IF '(' . lexpr ')' THEN stmts ELSE stmts ENDIF ';'

    NUMBER  shift, and go to state 15
    M       shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18

    lexpr  go to state 21
    expr   go to state 22


state 14

    6 stmt: READ '(' ID . ')' ';'

    ')'  shift, and go to state 23


state 15

   19 expr: NUMBER .

    $default  reduce using rule 19 (expr)


state 16

   17 expr: M . expr

    NUMBER  shift, and go to state 15
    M       shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18

    expr  go to state 24


state 17

   20 expr: ID .

    $default  reduce using rule 20 (expr)


state 18

   16 expr: '(' . expr ')'

    NUMBER  shift, and go to state 15
    M       shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18

    expr  go to state 25


state 19

    7 stmt: WRITE '(' expr . ')' ';'
   11 expr: expr . P expr
   12     | expr . M expr
   13     | expr . S expr
   14     | expr . R expr
   15     | expr . D expr
   18     | expr . C expr

    P    shift, and go to state 26
    M    shift, and go to state 27
    S    shift, and go to state 28
    D    shift, and go to state 29
    C    shift, and go to state 30
    R    shift, and go to state 31
    ')'  shift, and go to state 32


state 20

    5 stmt: ID ASSIGN_OP expr . ';'
   11 expr: expr . P expr
   12     | expr . M expr
   13     | expr . S expr
   14     | expr . R expr
   15     | expr . D expr
   18     | expr . C expr

    P    shift, and go to state 26
    M    shift, and go to state 27
    S    shift, and go to state 28
    D    shift, and go to state 29
    C    shift, and go to state 30
    R    shift, and go to state 31
    ';'  shift, and go to state 33


state 21

    8 stmt: IF '(' lexpr . ')' THEN stmts ENDIF ';'
    9     | IF '(' lexpr . ')' THEN stmts ELSE stmts ENDIF ';'

    ')'  shift, and go to state 34


state 22

   10 lexpr: expr . RELOP expr
   11 expr: expr . P expr
   12     | expr . M expr
   13     | expr . S expr
   14     | expr . R expr
   15     | expr . D expr
   18     | expr . C expr

    P      shift, and go to state 26
    M      shift, and go to state 27
    S      shift, and go to state 28
    D      shift, and go to state 29
    C      shift, and go to state 30
    R      shift, and go to state 31
    RELOP  shift, and go to state 35


state 23

    6 stmt: READ '(' ID ')' . ';'

    ';'  shift, and go to state 36


state 24

   11 expr: expr . P expr
   12     | expr . M expr
   13     | expr . S expr
   14     | expr . R expr
   15     | expr . D expr
   17     | M expr .
   18     | expr . C expr

    $default  reduce using rule 17 (expr)


state 25

   11 expr: expr . P expr
   12     | expr . M expr
   13     | expr . S expr
   14     | expr . R expr
   15     | expr . D expr
   16     | '(' expr . ')'
   18     | expr . C expr

    P    shift, and go to state 26
    M    shift, and go to state 27
    S    shift, and go to state 28
    D    shift, and go to state 29
    C    shift, and go to state 30
    R    shift, and go to state 31
    ')'  shift, and go to state 37


state 26

   11 expr: expr P . expr

    NUMBER  shift, and go to state 15
    M       shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18

    expr  go to state 38


state 27

   12 expr: expr M . expr

    NUMBER  shift, and go to state 15
    M       shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18

    expr  go to state 39


state 28

   13 expr: expr S . expr

    NUMBER  shift, and go to state 15
    M       shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18

    expr  go to state 40


state 29

   15 expr: expr D . expr

    NUMBER  shift, and go to state 15
    M       shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18

    expr  go to state 41


state 30

   18 expr: expr C . expr

    NUMBER  shift, and go to state 15
    M       shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18

    expr  go to state 42


state 31

   14 expr: expr R . expr

    NUMBER  shift, and go to state 15
    M       shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18

    expr  go to state 43


state 32

    7 stmt: WRITE '(' expr ')' . ';'

    ';'  shift, and go to state 44


state 33

    5 stmt: ID ASSIGN_OP expr ';' .

    $default  reduce using rule 5 (stmt)


state 34

    8 stmt: IF '(' lexpr ')' . THEN stmts ENDIF ';'
    9     | IF '(' lexpr ')' . THEN stmts ELSE stmts ENDIF ';'

    THEN  shift, and go to state 45


state 35

   10 lexpr: expr RELOP . expr

    NUMBER  shift, and go to state 15
    M       shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18

    expr  go to state 46


state 36

    6 stmt: READ '(' ID ')' ';' .

    $default  reduce using rule 6 (stmt)


state 37

   16 expr: '(' expr ')' .

    $default  reduce using rule 16 (expr)


state 38

   11 expr: expr . P expr
   11     | expr P expr .
   12     | expr . M expr
   13     | expr . S expr
   14     | expr . R expr
   15     | expr . D expr
   18     | expr . C expr

    S  shift, and go to state 28
    D  shift, and go to state 29
    C  shift, and go to state 30
    R  shift, and go to state 31

    $default  reduce using rule 11 (expr)


state 39

   11 expr: expr . P expr
   12     | expr . M expr
   12     | expr M expr .
   13     | expr . S expr
   14     | expr . R expr
   15     | expr . D expr
   18     | expr . C expr

    S  shift, and go to state 28
    D  shift, and go to state 29
    C  shift, and go to state 30
    R  shift, and go to state 31

    $default  reduce using rule 12 (expr)


state 40

   11 expr: expr . P expr
   12     | expr . M expr
   13     | expr . S expr
   13     | expr S expr .
   14     | expr . R expr
   15     | expr . D expr
   18     | expr . C expr

    C  shift, and go to state 30
    R  shift, and go to state 31

    $default  reduce using rule 13 (expr)


state 41

   11 expr: expr . P expr
   12     | expr . M expr
   13     | expr . S expr
   14     | expr . R expr
   15     | expr . D expr
   15     | expr D expr .
   18     | expr . C expr

    C  shift, and go to state 30
    R  shift, and go to state 31

    $default  reduce using rule 15 (expr)


state 42

   11 expr: expr . P expr
   12     | expr . M expr
   13     | expr . S expr
   14     | expr . R expr
   15     | expr . D expr
   18     | expr . C expr
   18     | expr C expr .

    R  shift, and go to state 31

    C  error (nonassociative)

    $default  reduce using rule 18 (expr)


state 43

   11 expr: expr . P expr
   12     | expr . M expr
   13     | expr . S expr
   14     | expr . R expr
   14     | expr R expr .
   15     | expr . D expr
   18     | expr . C expr

    R  error (nonassociative)

    $default  reduce using rule 14 (expr)


state 44

    7 stmt: WRITE '(' expr ')' ';' .

    $default  reduce using rule 7 (stmt)


state 45

    8 stmt: IF '(' lexpr ')' THEN . stmts ENDIF ';'
    9     | IF '(' lexpr ')' THEN . stmts ELSE stmts ENDIF ';'

    $default  reduce using rule 4 (stmts)

    stmts  go to state 47


state 46

   10 lexpr: expr RELOP expr .
   11 expr: expr . P expr
   12     | expr . M expr
   13     | expr . S expr
   14     | expr . R expr
   15     | expr . D expr
   18     | expr . C expr

    P  shift, and go to state 26
    M  shift, and go to state 27
    S  shift, and go to state 28
    D  shift, and go to state 29
    C  shift, and go to state 30
    R  shift, and go to state 31

    $default  reduce using rule 10 (lexpr)


state 47

    3 stmts: stmts . stmt
    8 stmt: IF '(' lexpr ')' THEN stmts . ENDIF ';'
    9     | IF '(' lexpr ')' THEN stmts . ELSE stmts ENDIF ';'

    READ   shift, and go to state 5
    WRITE  shift, and go to state 6
    ID     shift, and go to state 7
    IF     shift, and go to state 8
    ENDIF  shift, and go to state 48
    ELSE   shift, and go to state 49

    stmt  go to state 9


state 48

    8 stmt: IF '(' lexpr ')' THEN stmts ENDIF . ';'

    ';'  shift, and go to state 50


state 49

    9 stmt: IF '(' lexpr ')' THEN stmts ELSE . stmts ENDIF ';'

    $default  reduce using rule 4 (stmts)

    stmts  go to state 51


state 50

    8 stmt: IF '(' lexpr ')' THEN stmts ENDIF ';' .

    $default  reduce using rule 8 (stmt)


state 51

    3 stmts: stmts . stmt
    9 stmt: IF '(' lexpr ')' THEN stmts ELSE stmts . ENDIF ';'

    READ   shift, and go to state 5
    WRITE  shift, and go to state 6
    ID     shift, and go to state 7
    IF     shift, and go to state 8
    ENDIF  shift, and go to state 52

    stmt  go to state 9


state 52

    9 stmt: IF '(' lexpr ')' THEN stmts ELSE stmts ENDIF . ';'

    ';'  shift, and go to state 53


state 53

    9 stmt: IF '(' lexpr ')' THEN stmts ELSE stmts ENDIF ';' .

    $default  reduce using rule 9 (stmt)
